webpackJsonp([0x84a1bdaa2cb5],{270:function(e,n){e.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Create",doc:2,section:2,type:"doc"},fields:{slug:"/create"}}},{node:{frontmatter:{title:"Express",doc:3,section:3,type:"doc"},fields:{slug:"/express"}}},{node:{frontmatter:{title:"FAQ",doc:5,section:1,type:"doc"},fields:{slug:"/faq"}}},{node:{frontmatter:{title:"Generators",doc:3,section:1,type:"doc"},fields:{slug:"/generators"}}},{node:{frontmatter:{title:"Quick Start",doc:1,section:1,type:"doc"},fields:{slug:"/quick-start"}}},{node:{frontmatter:{title:"Packages",doc:1,section:2,type:"doc"},fields:{slug:"/packages"}}},{node:{frontmatter:{title:"React Native",doc:2,section:3,type:"doc"},fields:{slug:"/react-native"}}},{node:{frontmatter:{title:"Redux",doc:1,section:3,type:"doc"},fields:{slug:"/redux"}}},{node:{frontmatter:{title:"Standalone",doc:2,section:2,type:"doc"},fields:{slug:"/standalone"}}},{node:{frontmatter:{title:"Templates",doc:2,section:1,type:"doc"},fields:{slug:"/templates"}}}]},postBySlug:{html:'<p>With <code>hygen</code>, every time you spot a repetitive task, or a hidden structure in files you\'re editing, you\'ll quickly make a new generator.</p>\n<div class="gatsby-highlight">\n      <pre class="language-lua"><code><span class="gatsby-highlight-code-line">$ hygen generator new <span class="token comment">--name mailer</span>\n</span>                              `<span class="token comment">-------- just a name you pick.</span>\n\nLoaded templates<span class="token punctuation">:</span> _templates\n<span class="gatsby-highlight-code-line">       added<span class="token punctuation">:</span> _templates<span class="token operator">/</span>mailer<span class="token operator">/</span>new<span class="token operator">/</span>hello<span class="token punctuation">.</span>ejs<span class="token punctuation">.</span>t\n</span>                                       `<span class="token comment">------ your template file.</span>\n\n\n$ hygen\n\nError<span class="token punctuation">:</span> please specify a generator<span class="token punctuation">.</span>\n\nAvailable actions<span class="token punctuation">:</span>\ngenerator<span class="token punctuation">:</span> new<span class="token punctuation">,</span> with<span class="token operator">-</span>prompt\n<span class="gatsby-highlight-code-line">mailer<span class="token punctuation">:</span> new\n</span>    \\\n     `<span class="token comment">----------- your new generator is already here!</span>\n</code></pre>\n      </div>\n<p>The moment we add a generator under <code>_templates</code>, it\'s ready to use. Here\'s <code>hello.ejs.t</code> that was placed in the template folder for you:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token operator">--</span><span class="token operator">-</span>\nto<span class="token punctuation">:</span> app<span class="token operator">/</span>hello<span class="token punctuation">.</span>js\n<span class="token operator">--</span><span class="token operator">-</span>\n<span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token template-string"><span class="token string">`\nHello!\nThis is your first hygen template.\n\nLearn what it can do here:\n\nhttps://github.com/jondot/hygen\n`</span></span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>To make real mailer, let\'s copy this file and rename it a bit:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ <span class="token function">mv</span> _templates/mailer/new/<span class="token punctuation">{</span>hello.js,html.ejs.t<span class="token punctuation">}</span>\n$ <span class="token function">cp</span> _templates/mailer/new/<span class="token punctuation">{</span>html.ejs.t,text.ejs.t<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>We use a <code>.t</code> suffix because it disables our editor trying to be smart - use what ever you like. For this example these files represent the HTML and text forms of an email sender.</p>\n<div class="custom-block-info"><h6 id="creative-freedom"><a href="#creative-freedom" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creative Freedom</h6><p>hygen doesn\'t care about file names or file types in your generator folders. It only cares about folder structure and the <em>contents</em> of your files.</p></div>\n<p>Also note that each template has a <em>frontmatter</em> delimited by a pair of <code>---</code>\'s. In our example, we have a special <code>to:</code> property which tells <code>hygen</code> where to put the generated file. We\'ll see more of these in <a href="/templates">templates</a>.</p>\n<h2 id="structure"><a href="#structure" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Structure</h2>\n<p>Let\'s look at our folder structure:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>_templates/\n  mailer/\n    new/\n      html.ejs.t\n      text.ejs.t\napp/\n  index.js\npackage.json</code></pre>\n      </div>\n<p>Every time you call it, <code>hygen mailer new</code> automagically picks up the closest <code>_templates</code> folder, and renders all files in <code>mailer/new</code>. In this case it\'s <code>html.ejs.t</code> and <code>text.ejs.t</code>.</p>\n<div class="custom-block-info"><h6 id="hygen-is-contextual"><a href="#hygen-is-contextual" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hygen is Contextual</h6><p><code>hygen</code> simplifies things by asserting "command structure is folder structure".</p><p><code>hygen</code> will pick up the <code>_templates</code> in your current working directory.</p></div>\n<h2 id="cli-arguments"><a href="#cli-arguments" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CLI Arguments</h2>\n<p>To give <code>hygen</code> arguments via CLI, we follow this pattern:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ hygen mailer new --name foobar --message hello --version 1</code></pre>\n      </div>\n<p>Any double-dash (<code>--</code>) argument becomes a variable we can use later in our templates. In the example above we can use <code>name</code>, <code>message</code> and <code>version</code>.</p>\n<p>Here\'s the contents of the template <code>html.ejs.t</code> with the variables in place:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token punctuation">---</span>\n<span class="token key atrule">to</span><span class="token punctuation">:</span> app/emails/&lt;%= name %<span class="token punctuation">></span>.html\n<span class="token punctuation">---</span>\n&lt;h1<span class="token punctuation">></span>Hello &lt;%= name %<span class="token punctuation">></span>&lt;/h1<span class="token punctuation">></span>\n&lt;%= message %<span class="token punctuation">></span>\n(version &lt;%= version %<span class="token punctuation">></span>)\n</code></pre>\n      </div>\n<p>Try making the text variant yourself by editing <code>text.ejs.t</code>. Note: you want to put it in the correct place with <code>to:</code>.</p>\n<h2 id="prompting-arguments"><a href="#prompting-arguments" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prompting Arguments</h2>\n<p>If you prefer some of your generators to be interactive (you can mix and match), you can use prompts.</p>\n<p>Per generator, include a special <code>prompt.js</code> file. It will declare all variables to collect from the user for a given generator.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>_templates/\n  mailer/\n<span class="gatsby-highlight-code-line">    new/           <span class="token operator">&lt;</span>-- the mailer new generator\n</span><span class="gatsby-highlight-code-line">      prompt.js    <span class="token operator">&lt;</span>-- your prompt file<span class="token operator">!</span>\n</span>      html.ejs.t\n      text.ejs.t\n</code></pre>\n      </div>\n<p>Here\'s an example <code>prompt.js</code> declaring a <code>message</code> input variable:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'input\'</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'message\'</span><span class="token punctuation">,</span>\n    message<span class="token punctuation">:</span> <span class="token string">"What\'s your message?"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n      </div>\n<p>The format is based on the very popular <a href="https://github.com/SBoudrias/Inquirer.js">inquirer</a>, so hopefully, nothing new to you. Let\'s use the <code>message</code> variable now:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code>---\nto: app/emails/&lt;%= name %>.txt\n---\n<span class="gatsby-highlight-code-line">&lt;%= message %>\n</span></code></pre>\n      </div>\n<p>Note that the <code>name</code> variable has to come from the CLI. To generate, we\'ll do this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ hygen mailer new --name fancy-mailer</code></pre>\n      </div>\n<p>Which will ask the user for the <code>message</code>, and generate all contents.</p>\n<h2 id="documenting-your-generators"><a href="#documenting-your-generators" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documenting Your Generators</h2>\n<p>Since there\'s a special <code>message</code> prop you can use in any template, you can use that to build generator help screens. Ultimately, your generator should be documenting itself.</p>\n<p>Looking at our generator layout from before, we add a <code>help</code> action:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>_templates/\n  mailer/\n<span class="gatsby-highlight-code-line">    help/\n</span><span class="gatsby-highlight-code-line">      index.ejs.t\n</span>    new/\n      prompt.js\n      html.ejs.t\n      text.ejs.t\n</code></pre>\n      </div>\n<p>Our <code>index.ejs.t</code> is simply a blank template, with just a <code>message:</code> prop:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token punctuation">---</span>\n<span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n  - hygen {bold mailer} new --name [NAME]</span>\n<span class="token punctuation">---</span>\n</code></pre>\n      </div>\n<p>The special <code>|</code> annotation is a YAML literal block. Should you need it, <a href="https://learnxinyminutes.com/docs/yaml/">here\'s a quick YAML refresher</a>.</p>\n<p>Note that in <code>message</code> you can have a special coloring syntax, which can spice up your self-documenting generators.</p>\n<p>Here\'s a few examples:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token punctuation">{</span>bold mailer<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>red mailer<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>underline mailer<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>green mailer<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>For more styles <a href="https://github.com/chalk/chalk#styles">check out chalk</a>.</p>\n<h2 id="selecting-parts-of-a-generator"><a href="#selecting-parts-of-a-generator" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Selecting Parts of a Generator</h2>\n<p>In addition to what we\'ve seen until now, <code>hygen</code> lets the user select parts of a generator.</p>\n<p>The complete form is:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ hygen GENERATOR ACTION:SUBACTION</code></pre>\n      </div>\n<p>Where <code>SUBACTION</code> is a regular expression or a simple string <code>hygen</code> uses to pick up the subset of templates you want from a generator.</p>\n<p>Using our mailer example, this generates only the text part:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ hygen mailer new:text --name textual-mailer</code></pre>\n      </div>\n<p>Because we have a file named <code>text.ejs.t</code>, the string <code>text</code> in <code>new:text</code> will match it.</p>\n<p>In the same way we could have used a proper regular expression:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ hygen mailer new:.*xt --name textual-mailer</code></pre>\n      </div>\n<p>That\'s about it for generators.</p>\n<p>That\'s it for now, you\'re invited to take a look at the <a href="/faq">FAQ</a>, and <a href="/packages">Packages</a>.</p>',timeToRead:4,excerpt:"With  hygen , every time you spot a repetitive task, or a hidden structure in files you're editing, you'll quickly make a new generator. The…",frontmatter:{title:"Generators"},fields:{slug:"/generators"}}},pathContext:{slug:"/generators"}}}});
//# sourceMappingURL=path---generators-8eb63e40509c93f12785.js.map