{"version":3,"sources":["webpack:///path---express-5ed44e0ab9f2f38cd863.js","webpack:///./.cache/json/express.json"],"names":["webpackJsonp","261","module","exports","data","allPostTitles","edges","node","frontmatter","title","doc","section","type","fields","slug","postBySlug","html","timeToRead","excerpt","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,gEAAAC,IAAA,KAAAC,QAAA,KAAAC,KAAA,MAA8GC,QAAWC,KAAA,oEAA2EP,MAAQC,aAAeC,MAAA,UAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAmDC,QAAWC,KAAA,eAAsBP,MAAQC,aAAeC,MAAA,MAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAA+CC,QAAWC,KAAA,WAAkBP,MAAQC,aAAeC,MAAA,cAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAuDC,QAAWC,KAAA,mBAA0BP,MAAQC,aAAeC,MAAA,aAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAsDC,QAAWC,KAAA,kBAAyBP,MAAQC,aAAeC,MAAA,eAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAwDC,QAAWC,KAAA,oBAA2BP,MAAQC,aAAeC,MAAA,QAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAiDC,QAAWC,KAAA,aAAoBP,MAAQC,aAAeC,MAAA,YAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAqDC,QAAWC,KAAA,kBAAwBC,YAAeC,KAAA,q1HAAwrHC,WAAA,EAAAC,QAAA,gJAAAV,aAAicC,MAAA,WAAkBI,QAAWC,KAAA,cAAoBK,aAAgBL,KAAA","file":"path---express-5ed44e0ab9f2f38cd863.js","sourcesContent":["webpackJsonp([85263177532312],{\n\n/***/ 261:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Hygen: The scalable code generator that lives in your project\",\"doc\":null,\"section\":null,\"type\":null},\"fields\":{\"slug\":\"/hygen-the-scalable-code-generator-that-lives-in-your-project\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Express\",\"doc\":3,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/express\"}}},{\"node\":{\"frontmatter\":{\"title\":\"FAQ\",\"doc\":4,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/faq\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Quick Start\",\"doc\":1,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/quick-start\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Generators\",\"doc\":2,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/generators\"}}},{\"node\":{\"frontmatter\":{\"title\":\"React Native\",\"doc\":2,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/react-native\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Redux\",\"doc\":1,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/redux\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Templates\",\"doc\":3,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/templates\"}}}]},\"postBySlug\":{\"html\":\"<p><a href=\\\"https://expressjs.com/\\\">Express.js</a> is arguably the most popular web framework for Node.js</p>\\n<p>A typical app structure for express celebrates the notion of <code>routes</code> and <code>handlers</code>, while views and data are left for interpretation (probably because the rise of microservices and client-side apps).</p>\\n<p>So an app structure may look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app/\\n  routes.js\\n  handlers/\\n    health.js\\n    shazam.js</code></pre>\\n      </div>\\n<p>While <code>routes.js</code> glues everything together:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// ... some code ...</span>\\n<span class=\\\"token keyword\\\">const</span> health <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./handlers/health'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> shazam <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./handlers/shazam'</span><span class=\\\"token punctuation\\\">)</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/health'</span><span class=\\\"token punctuation\\\">,</span> health<span class=\\\"token punctuation\\\">)</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/shazam'</span><span class=\\\"token punctuation\\\">,</span> shazam<span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> app\\n</code></pre>\\n      </div>\\n<p>Unlike React Native, you could dynamically load modules here. However, there's still a need for judgement when constructing the routes (<code>app.get/post</code> part).</p>\\n<p>Using <code>hygen</code> let's see how we could build something like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen route new --method post --name auth</code></pre>\\n      </div>\\n<p>Since we've been through a few templates as with <a href=\\\"1-redux.md\\\">previous</a> <a href=\\\"2-react-native.md\\\">use cases</a>, let's jump straight to the interesting part, the inject part.</p>\\n<p>So let's say our generator is structured like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>_templates/\\n  route/\\n    new/\\n      handler.ejs.t\\n      inject_handler.ejs.t</code></pre>\\n      </div>\\n<p>Then <code>inject_handler</code> looks like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token key atrule\\\">inject</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n<span class=\\\"token key atrule\\\">to</span><span class=\\\"token punctuation\\\">:</span> app/routes.js\\n<span class=\\\"token key atrule\\\">skip_if</span><span class=\\\"token punctuation\\\">:</span> &lt;%= name %<span class=\\\"token punctuation\\\">></span>\\n<span class=\\\"token key atrule\\\">before</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"module.exports = app\\\"</span>\\n<span class=\\\"token punctuation\\\">---</span>\\napp.&lt;%= method %<span class=\\\"token punctuation\\\">></span>('/&lt;%= name %<span class=\\\"token punctuation\\\">></span>'<span class=\\\"token punctuation\\\">,</span> &lt;%= name %<span class=\\\"token punctuation\\\">></span>)\\n</code></pre>\\n      </div>\\n<p>Note how we're anchoring this inject to <code>before: \\\"module.exports = app\\\"</code>. If in previous occasions we appended content to a given line, we're now prepending it.</p>\",\"timeToRead\":1,\"excerpt\":\"Express.js  is arguably the most popular web framework for Node.js A typical app structure for express celebrates the notion of  routes  andâ€¦\",\"frontmatter\":{\"title\":\"Express\"},\"fields\":{\"slug\":\"/express\"}}},\"pathContext\":{\"slug\":\"/express\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---express-5ed44e0ab9f2f38cd863.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Hygen: The scalable code generator that lives in your project\",\"doc\":null,\"section\":null,\"type\":null},\"fields\":{\"slug\":\"/hygen-the-scalable-code-generator-that-lives-in-your-project\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Express\",\"doc\":3,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/express\"}}},{\"node\":{\"frontmatter\":{\"title\":\"FAQ\",\"doc\":4,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/faq\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Quick Start\",\"doc\":1,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/quick-start\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Generators\",\"doc\":2,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/generators\"}}},{\"node\":{\"frontmatter\":{\"title\":\"React Native\",\"doc\":2,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/react-native\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Redux\",\"doc\":1,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/redux\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Templates\",\"doc\":3,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/templates\"}}}]},\"postBySlug\":{\"html\":\"<p><a href=\\\"https://expressjs.com/\\\">Express.js</a> is arguably the most popular web framework for Node.js</p>\\n<p>A typical app structure for express celebrates the notion of <code>routes</code> and <code>handlers</code>, while views and data are left for interpretation (probably because the rise of microservices and client-side apps).</p>\\n<p>So an app structure may look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app/\\n  routes.js\\n  handlers/\\n    health.js\\n    shazam.js</code></pre>\\n      </div>\\n<p>While <code>routes.js</code> glues everything together:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// ... some code ...</span>\\n<span class=\\\"token keyword\\\">const</span> health <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./handlers/health'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> shazam <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./handlers/shazam'</span><span class=\\\"token punctuation\\\">)</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/health'</span><span class=\\\"token punctuation\\\">,</span> health<span class=\\\"token punctuation\\\">)</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/shazam'</span><span class=\\\"token punctuation\\\">,</span> shazam<span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> app\\n</code></pre>\\n      </div>\\n<p>Unlike React Native, you could dynamically load modules here. However, there's still a need for judgement when constructing the routes (<code>app.get/post</code> part).</p>\\n<p>Using <code>hygen</code> let's see how we could build something like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen route new --method post --name auth</code></pre>\\n      </div>\\n<p>Since we've been through a few templates as with <a href=\\\"1-redux.md\\\">previous</a> <a href=\\\"2-react-native.md\\\">use cases</a>, let's jump straight to the interesting part, the inject part.</p>\\n<p>So let's say our generator is structured like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>_templates/\\n  route/\\n    new/\\n      handler.ejs.t\\n      inject_handler.ejs.t</code></pre>\\n      </div>\\n<p>Then <code>inject_handler</code> looks like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token key atrule\\\">inject</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n<span class=\\\"token key atrule\\\">to</span><span class=\\\"token punctuation\\\">:</span> app/routes.js\\n<span class=\\\"token key atrule\\\">skip_if</span><span class=\\\"token punctuation\\\">:</span> &lt;%= name %<span class=\\\"token punctuation\\\">></span>\\n<span class=\\\"token key atrule\\\">before</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"module.exports = app\\\"</span>\\n<span class=\\\"token punctuation\\\">---</span>\\napp.&lt;%= method %<span class=\\\"token punctuation\\\">></span>('/&lt;%= name %<span class=\\\"token punctuation\\\">></span>'<span class=\\\"token punctuation\\\">,</span> &lt;%= name %<span class=\\\"token punctuation\\\">></span>)\\n</code></pre>\\n      </div>\\n<p>Note how we're anchoring this inject to <code>before: \\\"module.exports = app\\\"</code>. If in previous occasions we appended content to a given line, we're now prepending it.</p>\",\"timeToRead\":1,\"excerpt\":\"Express.js  is arguably the most popular web framework for Node.js A typical app structure for express celebrates the notion of  routes  andâ€¦\",\"frontmatter\":{\"title\":\"Express\"},\"fields\":{\"slug\":\"/express\"}}},\"pathContext\":{\"slug\":\"/express\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/express.json\n// module id = 261\n// module chunks = 85263177532312"],"sourceRoot":""}