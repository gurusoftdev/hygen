{"version":3,"sources":["webpack:///path---hygen-the-scalable-code-generator-that-lives-in-your-project-8c28d0bf34ff4b5a0d37.js","webpack:///./.cache/json/hygen-the-scalable-code-generator-that-lives-in-your-project.json"],"names":["webpackJsonp","264","module","exports","data","allPostTitles","edges","node","frontmatter","title","doc","section","type","fields","slug","postBySlug","html","timeToRead","excerpt","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,gEAAAC,IAAA,KAAAC,QAAA,KAAAC,KAAA,MAA8GC,QAAWC,KAAA,oEAA2EP,MAAQC,aAAeC,MAAA,UAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAmDC,QAAWC,KAAA,eAAsBP,MAAQC,aAAeC,MAAA,MAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAA+CC,QAAWC,KAAA,WAAkBP,MAAQC,aAAeC,MAAA,aAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAsDC,QAAWC,KAAA,kBAAyBP,MAAQC,aAAeC,MAAA,cAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAuDC,QAAWC,KAAA,mBAA0BP,MAAQC,aAAeC,MAAA,eAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAwDC,QAAWC,KAAA,oBAA2BP,MAAQC,aAAeC,MAAA,QAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAiDC,QAAWC,KAAA,aAAoBP,MAAQC,aAAeC,MAAA,YAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,OAAqDC,QAAWC,KAAA,kBAAwBC,YAAeC,KAAA,+tmBAAulkBC,WAAA,EAAAC,QAAA,4IAAAV,aAA0rDC,MAAA,iEAAwEI,QAAWC,KAAA,mEAAyEK,aAAgBL,KAAA","file":"path---hygen-the-scalable-code-generator-that-lives-in-your-project-8c28d0bf34ff4b5a0d37.js","sourcesContent":["webpackJsonp([279692654645455],{\n\n/***/ 264:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Hygen: The scalable code generator that lives in your project\",\"doc\":null,\"section\":null,\"type\":null},\"fields\":{\"slug\":\"/hygen-the-scalable-code-generator-that-lives-in-your-project\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Express\",\"doc\":3,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/express\"}}},{\"node\":{\"frontmatter\":{\"title\":\"FAQ\",\"doc\":4,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/faq\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Generators\",\"doc\":2,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/generators\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Quick Start\",\"doc\":1,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/quick-start\"}}},{\"node\":{\"frontmatter\":{\"title\":\"React Native\",\"doc\":2,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/react-native\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Redux\",\"doc\":1,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/redux\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Templates\",\"doc\":3,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/templates\"}}}]},\"postBySlug\":{\"html\":\"<p><img src=\\\"https://github.com/jondot/hygen/raw/master/media/hygen.png\\\"></p>\\n<p><code>hygen</code> is a code generator that scales with your team. It's fast, flexible, and perfectly fits modular code bases. If you have a modular architecture, and if your code is tidy, there's a good chance you need <code>hygen</code>.</p>\\n<p>For the impatient, you can go ahead and play with it and check out the <a href=\\\"https://github.com/jondot/hygen\\\">Github repo</a>. Here's the gist:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ npm i -g hygen\\n$ cd your-project && hygen init self\\n$ hygen generator new --name my-gen\\n$ hygen my-gen\\n$ tree _templates</code></pre>\\n      </div>\\n<p>But if you'd like a story about software design as well, keep reading. It's told by hijacking a couple of fundemental user experience design laws (well, they're not <em>really</em> laws, but, yea).</p>\\n<h2 id=\\\"hicks-law\\\"><a href=\\\"#hicks-law\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hick's Law</h2>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Hick%27s_law\\\">Hick's law</a> states that the time it takes for a person to make a decision is a result of the possible choices he or she has: increasing the number of choices will increase the decision time.</p>\\n<p>Turning to technology, choosing a new tool is a massive uptake of new choices, and the process of <em>learning</em> that new tool amplifies it even more. Every step of the way, friction is the default. </p>\\n<p>As far as code generators go, <code>hygen</code> has a primary design goal that is to minimize this friction. The rest - is bonus.</p>\\n<p>Every generator has a templating engine. But there's also meta data; like where to place the new file at. To do metadata we placed a front-matter in the <em>same</em> template file, just like  <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a>  does, and every jekyll inspired blog generator that surfaced over the last few years.</p>\\n<p>If you have your own static blog generated with Jekyll, or any other tool that's inspired by it, then this should be super familiar.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>---\\nto: hygen-examples/mailers/<%= message || 'unnamed'%>/html.ejs\\ninject: true\\nbefore: \\\"const modules = [\\\"\\nskip_if: newModule\\n---</code></pre>\\n      </div>\\n<p>To render, we use <code>ejs</code> - a ubiquitous, non restricted (as opposed to logic-less) templating engine. If you want <a href=\\\"https://www.ebayinc.com/stories/blogs/tech/the-case-against-logic-less-templates/\\\">logic in your templates</a>, go ahead; we trust that you're responsible. There's plenty of ways to shoot your own foot but above all we want to be pragmatic. </p>\\n<p>From a syntax point of view a variant of <code>ejs</code> <a href=\\\"https://ruby-doc.org/stdlib-2.5.0/libdoc/erb/rdoc/ERB.html\\\">probably</a> <a href=\\\"https://en.wikipedia.org/wiki/PHP\\\">exists</a> in <a href=\\\"http://www.makotemplates.org/\\\">what ever</a> language you're coming from.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>import View from './view'\\n\\nstoriesOf('<%= Name %>', module)\\n  .addDecorator(withKnobs)\\n  .addDecorator(withTests('<%= Name %>'))\\n  .add('default', () => <View />)</code></pre>\\n      </div>\\n<p>A batteries included approach; a set of built-in commands to guide you to the next step.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen init self\\nLoaded templates: src/templates\\n       added: _templates/generator/with-prompt/hello.ejs.t\\n       added: _templates/generator/with-prompt/prompt.ejs.t\\n       added: _templates/generator/new/hello.ejs.t\\n\\n$ hygen generator new  --name mygen\\nLoaded templates: _templates\\n       added: _templates/mygen/new/hello.ejs.t</code></pre>\\n      </div>\\n<p>Intuitive argument parsing.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen module new --name auth --tokens bcrypt</code></pre>\\n      </div>\\n<p>And fantastic prompts, courtesy of <a href=\\\"https://github.com/SBoudrias/Inquirer.js\\\">inquirer</a>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen database setup --host localhost\\n? Select database (Press <space> to select, <a> to toggle all, <i> to invert selection)\\n❯◯ Postgres\\n ◉ sqlite\\n ◯ MySQL</code></pre>\\n      </div>\\n<p><code>hygen</code> doesn't impose a new programming language, project setup, or workflow. Because it lives <em>in</em> your project, and <em>in</em> your existing workflow and setup.</p>\\n<h2 id=\\\"parkinsons-law\\\"><a href=\\\"#parkinsons-law\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Parkinson's Law</h2>\\n<p>Let's hijack Parkinson's law for a moment. This is <em>the</em> problem with every generator framework I know.</p>\\n<blockquote>\\n<p>Work expands so as to fill all of the time available for its completion.</p>\\n</blockquote>\\n<p>When you have code generation set up as a separate project in or out of your repo (say, with <a href=\\\"https://github.com/audreyr/cookiecutter\\\">cookiecutter</a> or <a href=\\\"https://github.com/yeoman/yo\\\">yeoman</a>), it will become <em>a thing</em>. A shiny new toy. </p>\\n<p>At best, it becomes a product you look after that throws you out of context every time you want to tweak a template. At worst, it becomes stale and unmaintained - work invested, value never extracted.</p>\\n<h2 id=\\\"rails-did-it-first\\\"><a href=\\\"#rails-did-it-first\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Rails Did It First</h2>\\n<p>Wholesale project generators are still good for when you need an entire starter-project, although I doubt will survive given the surge of starter projects for which you can just <code>git clone</code> and move on.</p>\\n<p>They're also less great if you want to embed a generator workflow into your existing project, like <a href=\\\"http://guides.rubyonrails.org/command_line.html#rails-generate\\\">Rails</a> did when <em>it</em> kickstarted the idea of having generators be a core part of developer productivity into mass adoption for the first time. </p>\\n<p>Rails and  <a href=\\\"https://github.com/erikhuda/thor\\\">Thor</a>, the generator framework it used, changed the way I thought about code generators. Up until then, when I needed to generate code (mostly for ORM entities, ah the times we had!) I was sucked up into <a href=\\\"https://en.wikipedia.org/wiki/Text_Template_Transformation_Toolkit\\\">.NET's T4 Text Templates</a>. </p>\\n<p>But trying to mimick Rails didn't always end up nicely. I quickly picked up Thor for <a href=\\\"https://github.com/jondot/albathor\\\">Albathor</a>; an unholy amalgam of Rails's approach to code generation and the .NET build ecosystem</p>\\n<p>That was 7 years ago. I kept making generators  with Thor and friends hoping for productivity spikes. But these became projects I maintained which sucked up valuable time, counter-intuitively, the were lowering the returns in general productivity.</p>\\n<p>That only means one thing. A shopping list for a generator framework that stays out of your way.</p>\\n<ul>\\n<li>Process ergonomics - I don't want to compile my generators, or have them on a CI pipeline of their own.</li>\\n<li>Developer ergonomics - easily accessible and easily invoked.</li>\\n<li>Low friction - the <em>pitfall of success</em>. Each step I take should lead me to the next.</li>\\n<li>Technology agnostic - don't want a new tech stack.</li>\\n<li>Contextual - if I'm on the data layer, I want data generators.</li>\\n<li>Scalable - should work for multiple teams iterating over a large and modular codebase.</li>\\n<li>Feature packed - simple design doesn't mean a poor number of features.</li>\\n<li>Flexible - give me a way to shoot my foot if I want to.</li>\\n<li>Embeddable - can be composed into other projects. </li>\\n<li>Super customizable - defaults are OK, but give me escape hatches.</li>\\n<li>Clean, intentful - first be useful, only then be cool.</li>\\n</ul>\\n<p>That's what hygen became.</p>\\n<h2 id=\\\"hygen\\\"><a href=\\\"#hygen\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hygen</h2>\\n<p><img src=\\\"https://github.com/jondot/hygen/raw/master/media/hygen.gif\\\"></p>\\n<p>You can use it right now, in what ever project you have open. Here's how to make a generator that adds a markdown document to your <code>docs/</code> folder.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ npm i -g hygen\\n$ cd your-project\\n$ hygen init self\\n$ hygen generator new --name docs</code></pre>\\n      </div>\\n<p>Edit  <code>_templates/docs/new/hello.ejs.t</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>---\\nto: docs/<%= name %>.md\\n---\\n\\nHi!\\nI'm a document about <%= name %></code></pre>\\n      </div>\\n<p>And then rename. The name of the file doesn't matter, it's for you, for bookeeping purposes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ mv _templates/docs/new/{hello,new-doc}.ejs.t</code></pre>\\n      </div>\\n<p>Done, let's make a doc:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen docs new --name architecture\\n\\nLoaded templates: _templates\\n       added: docs/architecture.md</code></pre>\\n      </div>\\n<p>And now let's check this in:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>❯ gs\\nA  _templates/docs/new/new-doc.ejs.t\\nA  _templates/generator/new/hello.ejs.t\\nA  _templates/generator/with-prompt/hello.ejs.t\\nA  _templates/generator/with-prompt/prompt.ejs.t</code></pre>\\n      </div>\\n<p>The <code>hygen generator new</code> command is <em>also</em> checked in. This is part of the \\\"flexibility\\\" principle. It may be that you don't like the vanilla <code>hygen</code> generator for new generators. Go ahead and change it; then check it in. After this change all new generators you make will incorporate your <em>new way</em> to make them.</p>\\n<h2 id=\\\"power-to-the-generator\\\"><a href=\\\"#power-to-the-generator\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Power to the Generator</h2>\\n<p>But the bigger idea here is to generate code. <code>hygen</code> lets you add multiple files, make injections to existing files, have prompts for interactivity with the user, and more.</p>\\n<p>Here's how to ease some Redux boilerplate fatigue.</p>\\n<p>These days I choose <a href=\\\"https://github.com/erikras/ducks-modular-redux\\\">ducks</a>, to remove a little bit of boilerplate and have modularity baked in any app I build.</p>\\n<p>My typical Redux architecture would look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app/\\n  components/\\n    icon.js\\n    avatar.js\\n  modules/\\n    boot.js     <---- glues modules together, requires chat, app, and auth.\\n    chat/\\n      index.js  <---- the 'connect' bit for Redux.\\n      view.js   <---- the view, separated, for testing.\\n      state.js  <---- reducer, actions, types, selectors.\\n    app/\\n      index.js\\n      view.js\\n      state.js\\n    auth/\\n      index.js\\n      view.js\\n      state.js</code></pre>\\n      </div>\\n<h2 id=\\\"adding-a-module\\\"><a href=\\\"#adding-a-module\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Adding a Module</h2>\\n<p>Adding a new module is very easy with <code>hygen</code>. Here's how your templates look like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>_templates/\\n  module/\\n    new/\\n      index.ejs.t\\n      view.ejs.t\\n      state.ejs.t\\n      inject_boot.ejs.t   <--- adds a 'require' clause to boot.js</code></pre>\\n      </div>\\n<p>Here's how <code>index</code> looks like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\nto<span class=\\\"token punctuation\\\">:</span> app<span class=\\\"token operator\\\">/</span>modules<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> name <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">/</span>index<span class=\\\"token punctuation\\\">.</span>js\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token comment\\\">// requires, mappings, etc....</span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> Name <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>A similar trick would do for <code>view</code> and <code>state</code>. </p>\\n<p>How would we add a require line given that <code>boot.js</code> looks like this?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// ... some bootstrapping code ...</span>\\n\\n<span class=\\\"token keyword\\\">const</span> modules <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token comment\\\">// &lt;--- we want to inject a line here!</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'chat'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'auth'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'app'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token comment\\\">// ... rest of bootstrapping code ...</span>\\n</code></pre>\\n      </div>\\n<p>Let's build <code>inject_boot</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\nto<span class=\\\"token punctuation\\\">:</span> app<span class=\\\"token operator\\\">/</span>modules<span class=\\\"token operator\\\">/</span>boot<span class=\\\"token punctuation\\\">.</span>js\\ninject<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\nskip_if<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> name <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span>\\nafter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"const modules = [\\\"</span>\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n<span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>'<span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> name <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre>\\n      </div>\\n<p>And we're done! Generating a new module is saying this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen module new --name settings</code></pre>\\n      </div>\\n<h2 id=\\\"use-hygen-today\\\"><a href=\\\"#use-hygen-today\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Use Hygen Today</h2>\\n<p>There's more to see on <a href=\\\"http://hygen.io\\\">hygen.io</a> where the documentation lives at. But if you want a more gentle intro there's the digest form in the <a href=\\\"http://github.com/jondot/hygen\\\">README</a> <em>and</em> <code>hygen</code> is built with zero configuration and no strings attached. So if you like trying things first, just install it, make a few generators and see if it fits you.</p>\",\"timeToRead\":7,\"excerpt\":\"hygen  is a code generator that scales with your team. It's fast, flexible, and perfectly fits modular code bases. If you have a modular…\",\"frontmatter\":{\"title\":\"Hygen: The scalable code generator that lives in your project\"},\"fields\":{\"slug\":\"/hygen-the-scalable-code-generator-that-lives-in-your-project\"}}},\"pathContext\":{\"slug\":\"/hygen-the-scalable-code-generator-that-lives-in-your-project\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---hygen-the-scalable-code-generator-that-lives-in-your-project-8c28d0bf34ff4b5a0d37.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Hygen: The scalable code generator that lives in your project\",\"doc\":null,\"section\":null,\"type\":null},\"fields\":{\"slug\":\"/hygen-the-scalable-code-generator-that-lives-in-your-project\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Express\",\"doc\":3,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/express\"}}},{\"node\":{\"frontmatter\":{\"title\":\"FAQ\",\"doc\":4,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/faq\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Generators\",\"doc\":2,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/generators\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Quick Start\",\"doc\":1,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/quick-start\"}}},{\"node\":{\"frontmatter\":{\"title\":\"React Native\",\"doc\":2,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/react-native\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Redux\",\"doc\":1,\"section\":2,\"type\":\"doc\"},\"fields\":{\"slug\":\"/redux\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Templates\",\"doc\":3,\"section\":1,\"type\":\"doc\"},\"fields\":{\"slug\":\"/templates\"}}}]},\"postBySlug\":{\"html\":\"<p><img src=\\\"https://github.com/jondot/hygen/raw/master/media/hygen.png\\\"></p>\\n<p><code>hygen</code> is a code generator that scales with your team. It's fast, flexible, and perfectly fits modular code bases. If you have a modular architecture, and if your code is tidy, there's a good chance you need <code>hygen</code>.</p>\\n<p>For the impatient, you can go ahead and play with it and check out the <a href=\\\"https://github.com/jondot/hygen\\\">Github repo</a>. Here's the gist:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ npm i -g hygen\\n$ cd your-project && hygen init self\\n$ hygen generator new --name my-gen\\n$ hygen my-gen\\n$ tree _templates</code></pre>\\n      </div>\\n<p>But if you'd like a story about software design as well, keep reading. It's told by hijacking a couple of fundemental user experience design laws (well, they're not <em>really</em> laws, but, yea).</p>\\n<h2 id=\\\"hicks-law\\\"><a href=\\\"#hicks-law\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hick's Law</h2>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Hick%27s_law\\\">Hick's law</a> states that the time it takes for a person to make a decision is a result of the possible choices he or she has: increasing the number of choices will increase the decision time.</p>\\n<p>Turning to technology, choosing a new tool is a massive uptake of new choices, and the process of <em>learning</em> that new tool amplifies it even more. Every step of the way, friction is the default. </p>\\n<p>As far as code generators go, <code>hygen</code> has a primary design goal that is to minimize this friction. The rest - is bonus.</p>\\n<p>Every generator has a templating engine. But there's also meta data; like where to place the new file at. To do metadata we placed a front-matter in the <em>same</em> template file, just like  <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a>  does, and every jekyll inspired blog generator that surfaced over the last few years.</p>\\n<p>If you have your own static blog generated with Jekyll, or any other tool that's inspired by it, then this should be super familiar.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>---\\nto: hygen-examples/mailers/<%= message || 'unnamed'%>/html.ejs\\ninject: true\\nbefore: \\\"const modules = [\\\"\\nskip_if: newModule\\n---</code></pre>\\n      </div>\\n<p>To render, we use <code>ejs</code> - a ubiquitous, non restricted (as opposed to logic-less) templating engine. If you want <a href=\\\"https://www.ebayinc.com/stories/blogs/tech/the-case-against-logic-less-templates/\\\">logic in your templates</a>, go ahead; we trust that you're responsible. There's plenty of ways to shoot your own foot but above all we want to be pragmatic. </p>\\n<p>From a syntax point of view a variant of <code>ejs</code> <a href=\\\"https://ruby-doc.org/stdlib-2.5.0/libdoc/erb/rdoc/ERB.html\\\">probably</a> <a href=\\\"https://en.wikipedia.org/wiki/PHP\\\">exists</a> in <a href=\\\"http://www.makotemplates.org/\\\">what ever</a> language you're coming from.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>import View from './view'\\n\\nstoriesOf('<%= Name %>', module)\\n  .addDecorator(withKnobs)\\n  .addDecorator(withTests('<%= Name %>'))\\n  .add('default', () => <View />)</code></pre>\\n      </div>\\n<p>A batteries included approach; a set of built-in commands to guide you to the next step.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen init self\\nLoaded templates: src/templates\\n       added: _templates/generator/with-prompt/hello.ejs.t\\n       added: _templates/generator/with-prompt/prompt.ejs.t\\n       added: _templates/generator/new/hello.ejs.t\\n\\n$ hygen generator new  --name mygen\\nLoaded templates: _templates\\n       added: _templates/mygen/new/hello.ejs.t</code></pre>\\n      </div>\\n<p>Intuitive argument parsing.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen module new --name auth --tokens bcrypt</code></pre>\\n      </div>\\n<p>And fantastic prompts, courtesy of <a href=\\\"https://github.com/SBoudrias/Inquirer.js\\\">inquirer</a>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen database setup --host localhost\\n? Select database (Press <space> to select, <a> to toggle all, <i> to invert selection)\\n❯◯ Postgres\\n ◉ sqlite\\n ◯ MySQL</code></pre>\\n      </div>\\n<p><code>hygen</code> doesn't impose a new programming language, project setup, or workflow. Because it lives <em>in</em> your project, and <em>in</em> your existing workflow and setup.</p>\\n<h2 id=\\\"parkinsons-law\\\"><a href=\\\"#parkinsons-law\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Parkinson's Law</h2>\\n<p>Let's hijack Parkinson's law for a moment. This is <em>the</em> problem with every generator framework I know.</p>\\n<blockquote>\\n<p>Work expands so as to fill all of the time available for its completion.</p>\\n</blockquote>\\n<p>When you have code generation set up as a separate project in or out of your repo (say, with <a href=\\\"https://github.com/audreyr/cookiecutter\\\">cookiecutter</a> or <a href=\\\"https://github.com/yeoman/yo\\\">yeoman</a>), it will become <em>a thing</em>. A shiny new toy. </p>\\n<p>At best, it becomes a product you look after that throws you out of context every time you want to tweak a template. At worst, it becomes stale and unmaintained - work invested, value never extracted.</p>\\n<h2 id=\\\"rails-did-it-first\\\"><a href=\\\"#rails-did-it-first\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Rails Did It First</h2>\\n<p>Wholesale project generators are still good for when you need an entire starter-project, although I doubt will survive given the surge of starter projects for which you can just <code>git clone</code> and move on.</p>\\n<p>They're also less great if you want to embed a generator workflow into your existing project, like <a href=\\\"http://guides.rubyonrails.org/command_line.html#rails-generate\\\">Rails</a> did when <em>it</em> kickstarted the idea of having generators be a core part of developer productivity into mass adoption for the first time. </p>\\n<p>Rails and  <a href=\\\"https://github.com/erikhuda/thor\\\">Thor</a>, the generator framework it used, changed the way I thought about code generators. Up until then, when I needed to generate code (mostly for ORM entities, ah the times we had!) I was sucked up into <a href=\\\"https://en.wikipedia.org/wiki/Text_Template_Transformation_Toolkit\\\">.NET's T4 Text Templates</a>. </p>\\n<p>But trying to mimick Rails didn't always end up nicely. I quickly picked up Thor for <a href=\\\"https://github.com/jondot/albathor\\\">Albathor</a>; an unholy amalgam of Rails's approach to code generation and the .NET build ecosystem</p>\\n<p>That was 7 years ago. I kept making generators  with Thor and friends hoping for productivity spikes. But these became projects I maintained which sucked up valuable time, counter-intuitively, the were lowering the returns in general productivity.</p>\\n<p>That only means one thing. A shopping list for a generator framework that stays out of your way.</p>\\n<ul>\\n<li>Process ergonomics - I don't want to compile my generators, or have them on a CI pipeline of their own.</li>\\n<li>Developer ergonomics - easily accessible and easily invoked.</li>\\n<li>Low friction - the <em>pitfall of success</em>. Each step I take should lead me to the next.</li>\\n<li>Technology agnostic - don't want a new tech stack.</li>\\n<li>Contextual - if I'm on the data layer, I want data generators.</li>\\n<li>Scalable - should work for multiple teams iterating over a large and modular codebase.</li>\\n<li>Feature packed - simple design doesn't mean a poor number of features.</li>\\n<li>Flexible - give me a way to shoot my foot if I want to.</li>\\n<li>Embeddable - can be composed into other projects. </li>\\n<li>Super customizable - defaults are OK, but give me escape hatches.</li>\\n<li>Clean, intentful - first be useful, only then be cool.</li>\\n</ul>\\n<p>That's what hygen became.</p>\\n<h2 id=\\\"hygen\\\"><a href=\\\"#hygen\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hygen</h2>\\n<p><img src=\\\"https://github.com/jondot/hygen/raw/master/media/hygen.gif\\\"></p>\\n<p>You can use it right now, in what ever project you have open. Here's how to make a generator that adds a markdown document to your <code>docs/</code> folder.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ npm i -g hygen\\n$ cd your-project\\n$ hygen init self\\n$ hygen generator new --name docs</code></pre>\\n      </div>\\n<p>Edit  <code>_templates/docs/new/hello.ejs.t</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>---\\nto: docs/<%= name %>.md\\n---\\n\\nHi!\\nI'm a document about <%= name %></code></pre>\\n      </div>\\n<p>And then rename. The name of the file doesn't matter, it's for you, for bookeeping purposes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ mv _templates/docs/new/{hello,new-doc}.ejs.t</code></pre>\\n      </div>\\n<p>Done, let's make a doc:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen docs new --name architecture\\n\\nLoaded templates: _templates\\n       added: docs/architecture.md</code></pre>\\n      </div>\\n<p>And now let's check this in:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>❯ gs\\nA  _templates/docs/new/new-doc.ejs.t\\nA  _templates/generator/new/hello.ejs.t\\nA  _templates/generator/with-prompt/hello.ejs.t\\nA  _templates/generator/with-prompt/prompt.ejs.t</code></pre>\\n      </div>\\n<p>The <code>hygen generator new</code> command is <em>also</em> checked in. This is part of the \\\"flexibility\\\" principle. It may be that you don't like the vanilla <code>hygen</code> generator for new generators. Go ahead and change it; then check it in. After this change all new generators you make will incorporate your <em>new way</em> to make them.</p>\\n<h2 id=\\\"power-to-the-generator\\\"><a href=\\\"#power-to-the-generator\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Power to the Generator</h2>\\n<p>But the bigger idea here is to generate code. <code>hygen</code> lets you add multiple files, make injections to existing files, have prompts for interactivity with the user, and more.</p>\\n<p>Here's how to ease some Redux boilerplate fatigue.</p>\\n<p>These days I choose <a href=\\\"https://github.com/erikras/ducks-modular-redux\\\">ducks</a>, to remove a little bit of boilerplate and have modularity baked in any app I build.</p>\\n<p>My typical Redux architecture would look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app/\\n  components/\\n    icon.js\\n    avatar.js\\n  modules/\\n    boot.js     <---- glues modules together, requires chat, app, and auth.\\n    chat/\\n      index.js  <---- the 'connect' bit for Redux.\\n      view.js   <---- the view, separated, for testing.\\n      state.js  <---- reducer, actions, types, selectors.\\n    app/\\n      index.js\\n      view.js\\n      state.js\\n    auth/\\n      index.js\\n      view.js\\n      state.js</code></pre>\\n      </div>\\n<h2 id=\\\"adding-a-module\\\"><a href=\\\"#adding-a-module\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Adding a Module</h2>\\n<p>Adding a new module is very easy with <code>hygen</code>. Here's how your templates look like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>_templates/\\n  module/\\n    new/\\n      index.ejs.t\\n      view.ejs.t\\n      state.ejs.t\\n      inject_boot.ejs.t   <--- adds a 'require' clause to boot.js</code></pre>\\n      </div>\\n<p>Here's how <code>index</code> looks like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\nto<span class=\\\"token punctuation\\\">:</span> app<span class=\\\"token operator\\\">/</span>modules<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> name <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">/</span>index<span class=\\\"token punctuation\\\">.</span>js\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token comment\\\">// requires, mappings, etc....</span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> Name <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>A similar trick would do for <code>view</code> and <code>state</code>. </p>\\n<p>How would we add a require line given that <code>boot.js</code> looks like this?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// ... some bootstrapping code ...</span>\\n\\n<span class=\\\"token keyword\\\">const</span> modules <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token comment\\\">// &lt;--- we want to inject a line here!</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'chat'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'auth'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'app'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token comment\\\">// ... rest of bootstrapping code ...</span>\\n</code></pre>\\n      </div>\\n<p>Let's build <code>inject_boot</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\nto<span class=\\\"token punctuation\\\">:</span> app<span class=\\\"token operator\\\">/</span>modules<span class=\\\"token operator\\\">/</span>boot<span class=\\\"token punctuation\\\">.</span>js\\ninject<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\nskip_if<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> name <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span>\\nafter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"const modules = [\\\"</span>\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n<span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>'<span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> name <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre>\\n      </div>\\n<p>And we're done! Generating a new module is saying this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>$ hygen module new --name settings</code></pre>\\n      </div>\\n<h2 id=\\\"use-hygen-today\\\"><a href=\\\"#use-hygen-today\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Use Hygen Today</h2>\\n<p>There's more to see on <a href=\\\"http://hygen.io\\\">hygen.io</a> where the documentation lives at. But if you want a more gentle intro there's the digest form in the <a href=\\\"http://github.com/jondot/hygen\\\">README</a> <em>and</em> <code>hygen</code> is built with zero configuration and no strings attached. So if you like trying things first, just install it, make a few generators and see if it fits you.</p>\",\"timeToRead\":7,\"excerpt\":\"hygen  is a code generator that scales with your team. It's fast, flexible, and perfectly fits modular code bases. If you have a modular…\",\"frontmatter\":{\"title\":\"Hygen: The scalable code generator that lives in your project\"},\"fields\":{\"slug\":\"/hygen-the-scalable-code-generator-that-lives-in-your-project\"}}},\"pathContext\":{\"slug\":\"/hygen-the-scalable-code-generator-that-lives-in-your-project\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/hygen-the-scalable-code-generator-that-lives-in-your-project.json\n// module id = 264\n// module chunks = 279692654645455"],"sourceRoot":""}