webpackJsonp([85263177532312],{266:function(e,s){e.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Express",doc:3,section:3,type:"doc"},fields:{slug:"/express"}}},{node:{frontmatter:{title:"FAQ",doc:5,section:1,type:"doc"},fields:{slug:"/faq"}}},{node:{frontmatter:{title:"Generators",doc:3,section:1,type:"doc"},fields:{slug:"/generators"}}},{node:{frontmatter:{title:"Quick Start",doc:1,section:1,type:"doc"},fields:{slug:"/quick-start"}}},{node:{frontmatter:{title:"React Native",doc:2,section:3,type:"doc"},fields:{slug:"/react-native"}}},{node:{frontmatter:{title:"Redux",doc:1,section:3,type:"doc"},fields:{slug:"/redux"}}},{node:{frontmatter:{title:"Standalone",doc:2,section:2,type:"doc"},fields:{slug:"/standalone"}}},{node:{frontmatter:{title:"Packages",doc:1,section:2,type:"doc"},fields:{slug:"/packages"}}},{node:{frontmatter:{title:"Templates",doc:2,section:1,type:"doc"},fields:{slug:"/templates"}}}]},postBySlug:{html:'<p><a href="https://expressjs.com/">Express.js</a> is arguably the most popular web framework for Node.js</p>\n<p>A typical app structure for express celebrates the notion of <code>routes</code> and <code>handlers</code>, while views and data are left for interpretation (probably because the rise of microservices and client-side apps).</p>\n<p>So an app structure may look like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>app/\n  routes.js\n  handlers/\n    health.js\n    shazam.js</code></pre>\n      </div>\n<p>While <code>routes.js</code> glues everything together:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// ... some code ...</span>\n<span class="token keyword">const</span> health <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./handlers/health\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> shazam <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./handlers/shazam\'</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/health\'</span><span class="token punctuation">,</span> health<span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">\'/shazam\'</span><span class="token punctuation">,</span> shazam<span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> app\n</code></pre>\n      </div>\n<p>Unlike React Native, you could dynamically load modules here. However, there\'s still a need for judgement when constructing the routes (<code>app.get/post</code> part).</p>\n<p>Using <code>hygen</code> let\'s see how we could build something like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ hygen route new --method post --name auth</code></pre>\n      </div>\n<p>Since we\'ve been through a few templates as with <a href="1-redux.md">previous</a> <a href="2-react-native.md">use cases</a>, let\'s jump straight to the interesting part, the inject part.</p>\n<p>So let\'s say our generator is structured like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>_templates/\n  route/\n    new/\n      handler.ejs.t\n      inject_handler.ejs.t</code></pre>\n      </div>\n<p>Then <code>inject_handler</code> looks like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token punctuation">---</span>\n<span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n<span class="token key atrule">to</span><span class="token punctuation">:</span> app/routes.js\n<span class="token key atrule">skip_if</span><span class="token punctuation">:</span> &lt;%= name %<span class="token punctuation">></span>\n<span class="token key atrule">before</span><span class="token punctuation">:</span> <span class="token string">"module.exports = app"</span>\n<span class="token punctuation">---</span>\napp.&lt;%= method %<span class="token punctuation">></span>(\'/&lt;%= name %<span class="token punctuation">></span>\'<span class="token punctuation">,</span> &lt;%= name %<span class="token punctuation">></span>)\n</code></pre>\n      </div>\n<p>Note how we\'re anchoring this inject to <code>before: "module.exports = app"</code>. If in previous occasions we appended content to a given line, we\'re now prepending it.</p>',timeToRead:1,excerpt:"Express.js  is arguably the most popular web framework for Node.js A typical app structure for express celebrates the notion of  routes  andâ€¦",frontmatter:{title:"Express"},fields:{slug:"/express"}}},pathContext:{slug:"/express"}}}});
//# sourceMappingURL=path---express-1def20675204b7aedbd4.js.map